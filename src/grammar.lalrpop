use crate::ast::*;

grammar;

pub Stmt: Stmt = {
    NonSeqStmt => <>,
    Seq => Stmt::from(<>),
}

NonSeqStmt: Stmt = {
    <i:Ident> ":=" <a:AExpr> => Stmt::Asgn(i, a),
    "while" <t:BExpr> "do" <body:NonSeqStmt> => {
        Stmt::While(t, Box::new(body))
    },
    "skip" => Stmt::Skip,
    "if" <i:BExpr> "then" <t:NonSeqStmt> "else" <e:NonSeqStmt> => Stmt::ite(i, t, e),
    "(" <Stmt> ")" => <>
};

Seq: Vec<Stmt> = {
    <mut seq:(<NonSeqStmt> ";")+> <last:NonSeqStmt> => {
        seq.push(last);
        seq
    }
};

AExpr: AExpr = {
    <l:AExpr> "+" <r:Term> => AExpr::add(l, r),
    <l:AExpr> "-" <r:Term> => AExpr::sub(l, r),
    Term => <>
};

Term: AExpr = {
    <l:Term> "*" <r:Factor> => AExpr::mult(l, r),
    <l:Term> "/" <r:Factor> => AExpr::div(l, r),
    <Factor> => <>
};

Factor: AExpr = {
    <sign:"-"?> <num:r"([0-9]?|[1-9][0-9]*)"> => {
        let mut val = num.parse::<i64>().unwrap();
        if sign.is_some() {
            val = -val;
        }
        AExpr::from(val)
    },
    <Ident> => AExpr::from(<>),
    "(" <AExpr> ")" => <>,
};

BExpr: BExpr = {
    <l:BExpr> "or" <r:BAnd> => BExpr::or(l, r),
    BAnd => <>
};

BAnd: BExpr = {
    <l:BAnd> "and" <r:BVal> => BExpr::and(l, r),
    <BVal> => <>
};

BVal: BExpr = {
    "true" => BExpr::Bool(true),
    "false" => BExpr::Bool(false),
    "not" <b:BVal> => BExpr::not(b),
    "(" <BExpr> ")" => <>,
    <l:AExpr> <c:Cmp> <r:AExpr> => BExpr::cmp(c, l, r)
};

Ident: String = {
    <ident:r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from(ident)
};

Cmp: Cmp = {
    "="  => Cmp::Eq,
    "!=" => Cmp::Neq,
    "<=" => Cmp::Le,
    "<"  => Cmp::Lt,
    ">=" => Cmp::Ge,
    ">"  => Cmp::Gt,
};